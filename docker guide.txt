# ========================================
# üöÄ PROJECT STARTUP GUIDE 
# ========================================
# Complete guide to restart the Network Monitoring Dashboard after computer shutdown

## üîÑ FULL PROJECT STARTUP (After Computer Restart)

### Step 1: Navigate to Project Directory
cd "D:\DevOps\DevOps Project - Local"

### Step 2: Activate Python Virtual Environment
.\network_dashboard_env\Scripts\activate

### Step 3: Start Lab Environment (Docker Containers)
cd "portfolio\local-testing"
docker-compose -f docker-compose-simple.yml up -d

### Step 4: Verify Lab Devices are Running
docker ps --filter name=lab-
# Should show: lab-router1 (port 2221), lab-switch1 (port 2222), lab-firewall1 (port 2223)

### Step 5: Return to Project Root and Start Streamlit Dashboard
cd "D:\DevOps\DevOps Project - Local"
streamlit run streamlit_app.py

### Step 6: Access the Dashboard
# Open browser and go to: http://localhost:8501
# Dashboard should be fully functional with all features:
# - üè† Dashboard (metrics & monitoring)
# - üì± Devices (lab device management)
# - ü§ñ Automation (SSH & Ansible automation)
# - üõ°Ô∏è Security (vulnerability scanning)
# - ‚öôÔ∏è Configuration (template deployment & backup)
# - üîç Monitoring (real-time performance)
# - üåê Topology (interactive network map)
# - üß™ Virtual Lab (lab environment control)

## üèÉ‚Äç‚ôÇÔ∏è QUICK START (One-Command Startup)
# Create a batch file with this content and save as "start_project.bat":
@echo off
cd /d "D:\DevOps\DevOps Project - Local"
call .\network_dashboard_env\Scripts\activate
cd portfolio\local-testing
docker-compose -f docker-compose-simple.yml up -d
cd "D:\DevOps\DevOps Project - Local"
echo ‚úÖ Lab environment started!
echo üöÄ Starting Streamlit dashboard...
streamlit run streamlit_app.py

## ‚úÖ VERIFICATION CHECKLIST
# After startup, verify these components are working:
# ‚ñ° Docker containers running (3 lab devices)
# ‚ñ° Streamlit dashboard accessible at localhost:8501
# ‚ñ° All 8 dashboard tabs loading without errors
# ‚ñ° Topology showing 3 active devices (green status)
# ‚ñ° Configuration management working (templates & backup)
# ‚ñ° Automation features connecting to lab devices

# ========================================
# üì¶ DOCKER MANAGEMENT COMMANDS
# ========================================

# Navigate to your project directory
cd "d:\DevOps Project"

# Start all services (web, redis, database)
docker-compose up --build

# Or start in background (detached mode)
docker-compose up -d --build

# View logs (if running in background)
docker-compose logs -f web

# Stop all services (preserves data)
docker-compose stop

# Stop and remove containers (removes containers but keeps images)
docker-compose down

# Stop, remove containers AND volumes (fresh start)
docker-compose down -v

# Stop, remove everything including images
docker-compose down --rmi all -v

# List running containers
docker ps

# Stop specific container by name
docker stop my-dashboard

# Stop specific container by ID
docker stop <container-id>

# Stop and remove container
docker stop my-dashboard && docker rm my-dashboard

# Force stop (if container won't stop)
docker kill my-dashboard

# ========================================
# üîß LAB ENVIRONMENT MANAGEMENT
# ========================================

## Lab Device Management (Your 3-Device Lab)
# Start lab devices
cd "D:\DevOps\DevOps Project - Local\portfolio\local-testing"
docker-compose -f docker-compose-simple.yml up -d

# Check lab device status
docker ps --filter name=lab-

# Stop lab devices
docker-compose -f docker-compose-simple.yml down

# Restart specific lab device
docker restart lab-router1
docker restart lab-switch1
docker restart lab-firewall1

# View lab device logs
docker logs lab-router1
docker logs lab-switch1
docker logs lab-firewall1

## Lab Device Connection Details
# lab-router1:   SSH to 127.0.0.1:2221 (admin/admin)
# lab-switch1:   SSH to 127.0.0.1:2222 (admin/admin)
# lab-firewall1: SSH to 127.0.0.1:2223 (admin/admin)

# ========================================
# üõ†Ô∏è TROUBLESHOOTING GUIDE
# ========================================

## Problem: Lab devices showing as offline in topology
# Solution: Restart lab environment
docker-compose -f docker-compose-simple.yml down
docker-compose -f docker-compose-simple.yml up -d

## Problem: Streamlit shows "Connection error" 
# Solution: Check if virtual environment is activated
.\network_dashboard_env\Scripts\activate

## Problem: "Module not found" errors
# Solution: Reinstall packages
.\network_dashboard_env\Scripts\pip.exe install -r requirements.txt

## Problem: Database errors in configuration management
# Solution: Clear Python cache and restart
Remove-Item -Recurse -Force "modules\__pycache__\"
streamlit run streamlit_app.py

## Problem: Docker containers won't start
# Solution: Clean Docker system
docker system prune -f
docker-compose -f docker-compose-simple.yml up -d --force-recreate

## Problem: Ports already in use (2221, 2222, 2223)
# Solution: Stop conflicting processes
netstat -ano | findstr :2221
# Then kill the process using Task Manager or:
taskkill /PID <process_id> /F

# ========================================
# üóÇÔ∏è DOCKER CLEANUP COMMANDS
# ========================================

# List running containers
docker ps

# List all containers (including stopped)
docker ps -a

# List Docker images
docker images

# List Docker volumes
docker volume ls

# Check Docker Compose services
docker-compose ps

# Remove stopped containers
docker container prune

# Remove unused images
docker image prune

# Remove unused volumes
docker volume prune

# Remove everything unused (careful!)
docker system prune -a

# Remove specific image
docker rmi network-dashboard

# Remove specific volume
docker volume rm <volume-name>

# ========================================
# üéØ PROJECT FEATURES OVERVIEW
# ========================================

## Dashboard Features Available After Startup:
# üè† Dashboard - System overview, metrics, real-time monitoring
# üì± Devices - Lab device management and status
# ü§ñ Automation - SSH automation, Ansible playbooks, WSL integration
# üõ°Ô∏è Security - Vulnerability scanning, compliance checking
# ‚öôÔ∏è Configuration - Template deployment, device backup, configuration comparison
# üîç Monitoring - Performance monitoring, availability tracking
# üåê Topology - Interactive network map with real-time device status
# üß™ Virtual Lab - Lab environment management and control

## Key Project Components:
# - Streamlit dashboard (localhost:8501)
# - 3 SSH lab devices (Docker containers)
# - SQLite databases (devices, monitoring, security, configurations)
# - WSL Ansible integration for automation
# - Real SSH automation with lab devices
# - Interactive topology visualization
# - Configuration template system with 8+ templates

## ‚ö° PERFORMANCE TIPS:
# - Keep lab devices running for best performance
# - Use auto-refresh features sparingly to save resources
# - Monitor Docker resource usage if system becomes slow
# - Clear Python cache if experiencing import issues